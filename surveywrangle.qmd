---
title: "Data wrangling for surveys & questionnaires"
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
xaringanExtra::use_panelset()

survdat <- read_csv("data/surveywrangle.csv")
head(survdat)
```

# column names

often, we want easier variable names to refer to in our data

first, let's write a little dictionary so we keep track of the current names. 
```{r}
datadict <- 
  tibble(
    variable = paste0("q", 1:ncol(survdat)),
    question = names(survdat)
  )
head(datadict)
```
if you want, write this to a .csv file so that you can open it in excel and keep track (if you prefer).

now we can change the names of the variables
```{r}
names(survdat) <- paste0("q", 1:ncol(survdat))
survdat
```

# replacing values and recoding

first things first, most of the questions are scored on a 5 point likert scale. 
the data has come out as words, but i want to treat them as numbers. 

```{r}
#| echo: false
tibble(
response = c("Very Inaccurate","Moderately Inaccurate","Neither Accurate nor Inaccurate","Moderately Accurate","Very Accurate"),
score = c(1:5)
) %>% gt::gt()
```

let's see how we can do it for one question first: 
the `recode()` function can be very useful, but there are lots of other approaches



::::panelset
:::panel
#### recode


```{r}
survdat %>% 
  mutate(
    q3 = recode(q3, 
                "Very Inaccurate" = 1,
                "Moderately Inaccurate" = 2,
                "Neither Accurate nor Inaccurate" = 3,
                "Moderately Accurate" = 4,
                "Very Accurate" = 5)
  )
```
:::
:::panel
#### ifelse
much more cumbersome as it requires multiple nested ifelse statements:
also, to ensure that anyhing that isn't one of the 5 valid response options gets to be an NA, we have the final "else" specifying that if it's none of the prespecified options, make it an NA
```{r}
survdat %>% 
  mutate(
    q3 = ifelse(q3 == "Very Inaccurate", 1,
                ifelse(q3 == "Moderately Inaccurate", 2, 
                       ifelse( q3 == "Neither Accurate nor Inaccurate", 3, 
                               ifelse(q3 == "Moderately Accurate", 4, 
                                      ifelse(q3 == "Very Accurate", 5, NA)))))
  )
```
:::

:::panel
#### case_when

the final entry here `TRUE ~ NA_real_` is a bit like saying "and if it is anything else, make it an NA". 
- note we need to specify the _type_ of NA - i.e. because we are making all of the entries numbers, it needs to be NA_real_. If were were making them characters, it would need to be NA_character
```{r}
survdat %>% 
  mutate(
    q3 = case_when(
      q3 == "Very Inaccurate" ~ 1,
      q3 == "Moderately Inaccurate" ~ 2,
      q3 == "Neither Accurate nor Inaccurate" ~ 3,
      q3 == "Moderately Accurate" ~ 4,
      q3 == "Very Accurate" ~ 5,
      TRUE ~ NA_real_
    )
  )
```
:::


::::

## reverse coding

tidyverse
base



# applying the same operation across variables

tidyverse
base

check!




# rowwise metrics

counting NAs


# row scoring

rowsums rowmeans
NAs

link reliability



